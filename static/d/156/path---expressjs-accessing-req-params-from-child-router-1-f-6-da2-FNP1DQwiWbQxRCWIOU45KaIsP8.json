{"data":{"site":{"siteMetadata":{"title":"My Random Thoughts","author":"Cedric Amaya"}},"markdownRemark":{"id":"4b26da24-7ef7-57c6-aebf-d60cb0cd141f","excerpt":"This past week marks the beginning of the backend portion of my studies at Lambda\nSchool, which means I am approximately a third of the wayâ€¦","html":"<p>This past week marks the beginning of the backend portion of my studies at Lambda\nSchool, which means I am approximately a third of the way complete with the\nprogram! During the frontend portion, we took a deep dive into JavaScript\nfundamentals before moving onto React.js and the Single Page Application ecosystem.\nNow on the backend, my peers and I are utilizing our JavaScript chops to build\nRESTful APIs using Node.js and Express. </p>\n<p>One week in and I already found myself dealing with an interesting issue. Allow\nme to provide some background information.</p>\n<p>The task at hand was to utilize Express in order to build a REST API. This backend\ncould be thought of as handling a blog, where there are <code class=\"language-text\">Posts</code> and <code class=\"language-text\">Comments</code>\nmodels. Another requirement of the project was to use an Express <code class=\"language-text\">Router</code> object\nin order to separate and organize the various routes to be defined.</p>\n<p>My first order of business was to create a <code class=\"language-text\">posts</code> router in order to handle\nHTTP requests on the <code class=\"language-text\">/api/posts</code> route:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* routes/posts.js */</span>\n<span class=\"token keyword\">const</span> postsRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\npostsRouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> postsRouter\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token comment\">/* server.js */</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> postsRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/posts'</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/posts'</span><span class=\"token punctuation\">,</span> postsRouter<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">...</span></code></pre></div>\n<p>Though not required, I thought it best to also separate the comments from the\nposts, so I defined a second router specifically for the <code class=\"language-text\">comments</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* routes/comments.js */</span>\n<span class=\"token keyword\">const</span> commentsRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> commentsRouter\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token comment\">/* routes/posts.js */</span>\n<span class=\"token keyword\">const</span> commentsRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/comments'</span><span class=\"token punctuation\">)</span>\n\npostsRouter<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id/comments'</span><span class=\"token punctuation\">,</span> commentsRouter<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">...</span></code></pre></div>\n<p>As you can see, any CRUD operations on <code class=\"language-text\">comments</code> would need to be handled via\nthe <code class=\"language-text\">/api/posts/:id/comments</code> route, thus relying on a specific <code class=\"language-text\">posts</code> id.</p>\n<p>The issue I ran into was when I attempted to read the <code class=\"language-text\">req.params.id</code> from the\nnested/child comments router, I was met with <code class=\"language-text\">undefined</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* routes/comments.js */</span>\n\ncommentsRouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> postId <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id    <span class=\"token comment\">// ==> would return `undefined`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">...</span></code></pre></div>","frontmatter":{"title":"Express: Accessing `req.params` in nested/child routers","date":"July 28, 2019","draft":false}}},"pageContext":{"slug":"/expressjs-accessing-req-params-from-child-router/","previous":{"fields":{"slug":"/deploying-react-app-with-netlify/"},"frontmatter":{"title":"Setting Up Continuous Deployments (CD) for a React App using Netlify"}},"next":null}}