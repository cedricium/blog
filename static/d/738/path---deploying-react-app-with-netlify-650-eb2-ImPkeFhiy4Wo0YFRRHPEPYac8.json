{"data":{"site":{"siteMetadata":{"title":"My Random Thoughts","author":"Cedric Amaya"}},"markdownRemark":{"id":"cf6c60e6-72c1-557e-9e38-e9842fe512ec","excerpt":"A straightforward guide to setting up Continuous Deployment for a React app\nhosted on GitHub and deployed using Netlify. Background If you…","html":"<p><em>A straightforward guide to setting up Continuous Deployment for a React app\nhosted on GitHub and deployed using Netlify.</em></p>\n<h2>Background</h2>\n<p>If you’re reading this, I assume you already know how awesome React.js is. With\ntools such as <code class=\"language-text\">create-react-app</code> to help scaffold a basic template in seconds,\ngetting started with and building your own React apps couldn’t be any easier.</p>\n<p>One aspect of working with modern web apps that can be confusing, however, is\nthe deployment process; the steps needed in order to have your app accessible\nto everyone via the web.</p>\n<p>This tutorial will walk you through setting up Continuous Deployments (CD) for\na React app that has been bootstrapped with <code class=\"language-text\">create-react-app</code> using Netlify.</p>\n<p>CD means a lot like what it sounds like, from Wikipedia:</p>\n<blockquote>\n<p>a strategy for software releases wherein any code commit that passes the automated\ntesting phase is automatically released into the production environment, making\nchanges that are visible to the software’s users.</p>\n</blockquote>\n<p>In researching how to deploy a React app myself, I came across numerous tutorials\ndescribing how to use Netlify’s drag-and-drop functionality or their CLI. These\nmethods are certainly alright, however, any changes made to your application\nrequire you to repeat the same steps every time to have your deployed app updated.</p>\n<p>With CD, your workflow as a developer doesn’t change minus the initial setup—make\nsome code changes, commit and push said changes to GitHub, and voila, within\nmoments your deployed React app should reflect the changes you have made.</p>\n<p>Sounds great, huh? Trust me, it is. Let’s see how it’s done!</p>\n<h2>Prerequisites</h2>\n<p>To keep this tutorial short and sweet, I’m going to assume a few things:</p>\n<ul>\n<li>you have a React app handy which was bootstrapped using <code class=\"language-text\">create-react-app</code></li>\n<li>said React app is hosted on GitHub or a similar web-based version control\nhosting service</li>\n</ul>\n<p>If you want to just see how it’s done, I have\n<a href=\"https://github.com/cedricium/netlify-cd-example\">setup a GitHub repository</a> which\nyou can fork and toy with as you follow along.</p>\n<p>If at any point you do run into trouble, feel free to contact me and I’d be happy\nto help you out.</p>\n<h2>Netlify Deployments</h2>\n<ol>\n<li><strong>Log in or Sign up with Netlify</strong></li>\n</ol>\n<p>Since you have a GitHub account, this should be a breeze. Head over to\n<a href=\"https://www.netlify.com/\">https://www.netlify.com/</a> to get started. In the top right corner of their website,\nchoose whatever option works best for you (either log in or sign up).</p>\n<ol start=\"2\">\n<li><strong>Create a New site from git</strong></li>\n</ol>\n<p>We have our amazing React app and want to show it off to the world, right? This\nis the way it’s done. Once you’re logged in, there should be a green primary\n“New site from Git” button—click it.</p>\n<p>Next, you should be asked to connect to a Git provider. In our case, it will be\nGitHub, however, you can also choose GitLab or BitBucket. Click the button\ncorresponding to your Git provider.</p>\n<p>Now you’ll need to choose which repository you want to link your site on Netlify.\nDepending on the settings you chose when authorizing Netlify to use your GitHub\naccount, you may or may not see all of your repos. If that’s the case, scroll down\nto the button of the page and click the link embedded in the “Can’t see your repo\nhere? Configure the Netlify app on GitHub.” text.</p>\n<p>Once you’ve selected the repo to link the Netlify site to, you should arrive at\nthe “Deploy settings for &#x3C;your-username>/&#x3C;your-repo>” page.</p>\n<p>If your repo contains a <code class=\"language-text\">package.json</code> and similar config files in the root\ndirectory, Netlify should have been able to figure out this was a React app and\npre-filled the “Basic build settings” such as “Build command” and\n“Publish directory”. If that’s your case then all you need to do is click the\n“Deploy site” button.</p>\n<p>Otherwise, if your repo uses an unconventional directory structure, move on to\nthe next section (looking at you Lambda School people). Don’t worry about filling\nout the “Basic build settings” inputs for now.</p>\n<ol start=\"3\">\n<li><strong>Optionally: Advanced site settings</strong></li>\n</ol>\n<p>So, maybe your React app is nested inside a directory or two. Have no fear, this\nposes no problem for us. For now, go ahead and click the “Deploy site” button.</p>\n<p>You will be directed to the main dashboard for your Netlify site. If you check\nthe url provided for your deployed site, you should be given a “Page Not Found”\nerror; that’s to be expected since we didn’t specify where Netlify could find the\nbuilt React app.</p>\n<p>Find and click “Site settings” from the main dashboard, then select “Build &#x26; deploy”\nfrom the sidebar.</p>\n<p>Under “Build settings”, lets fill out as much as we can by first selecting “Edit\nsettings”.</p>\n<ul>\n<li><strong>Repository:</strong> this should already be defined, so no need to change anything</li>\n<li><strong>Base directory:</strong> think of this as the root directory of the React app. For\nexample, given the repo structure below, our base directory would be <code class=\"language-text\">nested</code>.\nIf your React app is further nested, you can use <code class=\"language-text\">as/many/nests/as/possible</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">netlify-cd-example/\n    .gitignore\n    README.md\n    nested/\n        README.md\n        package.json\n        yarn.lock\n        public/\n            index.html\n            ...\n        src/\n            App.js\n            ...</code></pre></div>\n<ul>\n<li><strong>Build command:</strong> this is the command Netlify uses to well, build our site. In\ncase of a React app configured using <code class=\"language-text\">create-react-app</code>, we would type <code class=\"language-text\">yarn\nbuild</code> here.</li>\n<li><strong>Publish directory:</strong> this is the directory from which Netlify actually\nserves the built static content. The path from your “Base directory” should\nalready be filled in, so all we need to add for a React app is <code class=\"language-text\">build</code>.</li>\n<li><strong>Deploy log visibility:</strong> fairly self-explanatory, select whichever you want.</li>\n</ul>\n<p>And that should be all that is needed to get our React app up and running. Verify\nyour settings match your repo structure and then click “Save”.</p>\n<p>Select “Deploys” in the top navbar of your dashboard, then under the “Trigger\ndeploy” dropdown, select “Clear cache and deploy site”. Netlify’s robots will\nthen start the process of building the React app and deploying it.</p>\n<p>Barring any errors or issues, the deployment will be successful and you can now\ncheck out your live React site by clicking the “Preview deploy” link.</p>\n<p>Cheers! You’ve just deployed your React app. Now any changes you make to the\nproduction branch (default is <code class=\"language-text\">master</code> but can be changed under “Settings >\nBuild &#x26; deploy > Deploy contexts > Production branch”) will trigger Netlify\nbots to auto-build your React app and keep it updated.</p>\n<h2>Caveats &#x26; More</h2>\n<h3>Netlify + React Router</h3>\n<p>If your React application is using the popular <code class=\"language-text\">react-router</code> package, the above\nsettings may not work out of the box. There is some additional setup needed for\nrouting to work when deploying a React using Netlify—the article\n<a href=\"https://medium.com/@sschannaknetlify-and-react-router-1537aebe6256\"><em>Netlify and React Router</em></a>\nshould put you in the right direction.</p>\n<h3>Advanced Configuration</h3>\n<p>For those of you who like config files, all of the Netlify GUI steps outlined in\nthis article can be done by specifying the proper values in a <code class=\"language-text\">netlify.toml</code> file\nwhich must reside in the repository’s root directory.</p>\n<p>To learn more about configuring a Netlify site using the <code class=\"language-text\">netlify.toml</code> file, check\nout <a href=\"https://www.netlify.com/docs/netlify-toml-reference\">the official Netlify docs</a>.</p>","frontmatter":{"title":"Setting Up Continuous Deployments (CD) for a React App using Netlify","date":"May 09, 2019","draft":false}}},"pageContext":{"slug":"/deploying-react-app-with-netlify/","previous":{"fields":{"slug":"/side-project-addiction/"},"frontmatter":{"title":"On Side Project Addiction"}},"next":{"fields":{"slug":"/expressjs-accessing-req-params-from-child-routers/"},"frontmatter":{"title":"Express: Accessing `req.params` in nested/child routers"}}}}