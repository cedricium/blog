{"data":{"site":{"siteMetadata":{"title":"My Random Thoughts","author":"Cedric Amaya"}},"markdownRemark":{"id":"4b26da24-7ef7-57c6-aebf-d60cb0cd141f","excerpt":"This past week marks the beginning of the backend portion of my studies at Lambda\nSchool, which means I am approximately a third of the way…","html":"<p>This past week marks the beginning of the backend portion of my studies at Lambda\nSchool, which means I am approximately a third of the way complete with the\nprogram! During the frontend portion, we took a deep dive into JavaScript\nfundamentals before moving onto React.js and the Single Page Application ecosystem.\nNow on the backend, my peers and I are utilizing our JavaScript chops to build\nRESTful APIs using Node.js and Express. </p>\n<p>One week in and I already found myself dealing with an interesting issue. Allow\nme to provide some background information.</p>\n<h2>Background</h2>\n<p>The task at hand was to utilize Express to build a REST API. You can think of\nthis backend server as handling a blog, where there are <code class=\"language-text\">Posts</code> and <code class=\"language-text\">Comments</code>\nmodels. Another requirement of this project was to use an Express <code class=\"language-text\">Router</code> object\nto separate and organize the various routes needing implementation later on.</p>\n<p>My first order of business was to create a <code class=\"language-text\">posts</code> router to handle HTTP requests\non the <code class=\"language-text\">/api/posts</code> route:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* routes/posts/index.js */</span>\n<span class=\"token keyword\">const</span> postsRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\npostsRouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">...</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> postsRouter\n\n\n<span class=\"token comment\">/* server.js */</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> postsRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/posts'</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/posts'</span><span class=\"token punctuation\">,</span> postsRouter<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">...</span></code></pre></div>\n<p>Though not required, I thought it best to also separate the comments from the\nposts, so I defined a second router for the <code class=\"language-text\">comments</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* routes/comments/index.js */</span>\n<span class=\"token keyword\">const</span> commentsRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> commentsRouter\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token comment\">/* routes/posts/index.js */</span>\n<span class=\"token keyword\">const</span> commentsRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/comments'</span><span class=\"token punctuation\">)</span>\n\npostsRouter<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id/comments'</span><span class=\"token punctuation\">,</span> commentsRouter<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">...</span></code></pre></div>\n<h2>The Problem</h2>\n<p>As you can see, any CRUD operations on <code class=\"language-text\">comments</code> would need to be handled via\nthe <code class=\"language-text\">/api/posts/:id/comments</code> route, thus relying on a specific post <code class=\"language-text\">id</code>.</p>\n<p>The issue I ran into was when I attempted to read the <code class=\"language-text\">req.params.id</code> from the\nnested/child comments router, I was met with <code class=\"language-text\">undefined</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* routes/comments/index.js */</span>\n\ncommentsRouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> postId <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id  <span class=\"token comment\">// ==> would return `undefined`</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">...</span></code></pre></div>\n<p>After a little debugging and googling, I discovered that by default Express\ndoes not pass the <code class=\"language-text\">req.params</code> to child routers. Because the line:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">postsRouter<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id/comments'</span><span class=\"token punctuation\">,</span> commentsRouter<span class=\"token punctuation\">)</span></code></pre></div>\n<p>was defined in <code class=\"language-text\">routes/posts/index.js</code>, <code class=\"language-text\">commentsRouter</code> could not access\nthat post <code class=\"language-text\">id</code>.</p>\n<p>Initially, I thought to eliminate <code class=\"language-text\">commentsRouter</code> entirely and move all of its\nroute handlers to <code class=\"language-text\">postsRouter</code>. This would effectively give <code class=\"language-text\">commentsRouter</code>\naccess to all <code class=\"language-text\">req.params</code> by being in the same scope as its parent path\n(<code class=\"language-text\">/api/posts/:id</code>). This, however, seemed like a naive fix to the problem and I\nfelt as though there was a better solution. And there was.</p>\n<h2>Solution</h2>\n<p>When researching a fix for this issue, my attention was brought to the Express\n<code class=\"language-text\">Router</code> documentation.<sup>1</sup> There, I saw that the <code class=\"language-text\">Router</code> instantiation\nmethod documented a property of the optional <code class=\"language-text\">options</code> parameter, a little\nsomething named <code class=\"language-text\">mergeParams</code>.</p>\n<p>To my excitement, this property (set by default to <code class=\"language-text\">false</code>) does the following:</p>\n<blockquote>\n<p>Preserve the req.params values from the parent router. If the parent and the\nchild have conflicting param names, the child’s value take precedence.</p>\n</blockquote>\n<p>To put that into context, by setting that property to <code class=\"language-text\">true</code>, I could then keep\nmy <code class=\"language-text\">postsRouter</code> and <code class=\"language-text\">commentsRouter</code> separated <em>and</em> access the post <code class=\"language-text\">id</code>\nin <code class=\"language-text\">commentsRouter</code> via <code class=\"language-text\">req.params</code>. That was it, just the fix I needed!</p>\n<p>One small addition to the code and my original setup now works:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* routes/comments/index.js */</span>\n<span class=\"token keyword\">const</span> commentsRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> mergeParams<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n           <span class=\"token comment\">// note the addition of `mergeParams` ^^^^^^^^^^^^^^^^^^^^^</span>\n<span class=\"token operator\">...</span>\n\ncommentsRouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> postId <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id  <span class=\"token comment\">// ==> this now works 🎉</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you would like to get a better understanding of what’s going behind the scenes\nor you just want to see the code, feel free to check it out on GitHub.<sup>2</sup></p>\n<p>It’s being able to solve little problems like this that motivate me to keep\ncoding. No matter how big or small the victory, I will always be proud of myself\nand I look forward to tackling the next one.</p>\n<hr>\n<ol>\n<li>\n<p>Express <code class=\"language-text\">Router</code> instantiation documentation:\n<a href=\"https://expressjs.com/en/4x/api.html#express.router\">https://expressjs.com/en/4x/api.html#express.router</a></p>\n</li>\n<li>\n<p>Example code on GitHub:\n<a href=\"https://github.com/cedricium/webapi-ii-challenge/tree/cedric-amaya\">https://github.com/cedricium/webapi-ii-challenge/tree/cedric-amaya</a></p>\n</li>\n</ol>","frontmatter":{"title":"Express: Accessing `req.params` in nested/child routers","date":"July 28, 2019","draft":false}}},"pageContext":{"slug":"/expressjs-accessing-req-params-from-child-router/","previous":{"fields":{"slug":"/deploying-react-app-with-netlify/"},"frontmatter":{"title":"Setting Up Continuous Deployments (CD) for a React App using Netlify"}},"next":null}}